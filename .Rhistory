library(weatherforecast)
.get_weather_data <- function(city) {
# key for the api
key <- "3c656bd3014279a8f41b90522c014977"
url <- paste0("https://api.openweathermap.org/data/2.5/forecast?q=", city, "&appid=", key)
if (httr::status_code(httr::GET(url)) == 404) {
stop("city not found!")
}
d <- jsonlite::fromJSON(url)
# temperature data
df <- d$list
# tranfer temperature from Kelvins to Celsius
temp <- df$main$temp - 273.15
# date
date <- substr(df$dt_txt, 1, 10)
# country
country <- rep(d$city$country, nrow(df))
df <- data.frame(date = date, temp = temp, country = country)
# get average for everyday
df <- df %>%
dplyr::group_by(date, country) %>%
dplyr::summarize(mean_temp = mean(temp))
df <- data.frame(df)
return (df)
}
weather_plot('london')
weather_plot <- function(city) {
df <- .get_weather_data(city)
print(df)
ui <- shiny::fluidPage(
plotlyOutput("plot", height= 580)
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
p <- ggplot(df, ggplot2::aes(x = date, y = mean_temp, group = 1)) +
ggplot2::theme_bw() +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::labs(x = "Date", y = "Temperature(Celsius)",
title = paste0("Temperature in ", city, " (", country[1], ")"))
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplotly(p)
})
}
shiny::shinyApp(ui = ui, server = server)
}
.get_weather_data <- function(city) {
# key for the api
key <- "3c656bd3014279a8f41b90522c014977"
url <- paste0("https://api.openweathermap.org/data/2.5/forecast?q=", city, "&appid=", key)
if (httr::status_code(httr::GET(url)) == 404) {
stop("city not found!")
}
d <- jsonlite::fromJSON(url)
# temperature data
df <- d$list
# tranfer temperature from Kelvins to Celsius
temp <- df$main$temp - 273.15
# date
date <- substr(df$dt_txt, 1, 10)
# country
country <- rep(d$city$country, nrow(df))
df <- data.frame(date = date, temp = temp, country = country)
# get average for everyday
df <- df %>%
dplyr::group_by(date, country) %>%
dplyr::summarize(mean_temp = mean(temp))
df <- data.frame(df)
return (df)
}
View(weather_plot)
weather_plot(london)
weather_plot('london')
library(shiny)
library(plotly)
library(ggplot2)
weather_plot <- function(city) {
df <- .get_weather_data(city)
print(df)
ui <- shiny::fluidPage(
plotlyOutput("plot", height= 580)
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
p <- ggplot(df, ggplot2::aes(x = date, y = mean_temp, group = 1)) +
ggplot2::theme_bw() +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::labs(x = "Date", y = "Temperature(Celsius)",
title = paste0("Temperature in ", city, " (", country[1], ")"))
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplotly(p)
})
}
shiny::shinyApp(ui = ui, server = server)
}
.get_weather_data <- function(city) {
# key for the api
key <- "3c656bd3014279a8f41b90522c014977"
url <- paste0("https://api.openweathermap.org/data/2.5/forecast?q=", city, "&appid=", key)
if (httr::status_code(httr::GET(url)) == 404) {
stop("city not found!")
}
d <- jsonlite::fromJSON(url)
# temperature data
df <- d$list
# tranfer temperature from Kelvins to Celsius
temp <- df$main$temp - 273.15
# date
date <- substr(df$dt_txt, 1, 10)
# country
country <- rep(d$city$country, nrow(df))
df <- data.frame(date = date, temp = temp, country = country)
# get average for everyday
df <- df %>%
dplyr::group_by(date, country) %>%
dplyr::summarize(mean_temp = mean(temp))
df <- data.frame(df)
return (df)
}
weather_plot('london')
library(weatherforecast)
cityob <- weatherforecast::cityweather$new('london')
data <- cbind(as.data.frame(cityob$content$city),cityob$content$list[1,])
data %>%  plotly::plot_mapbox(x= ~coord.lon,y =~coord.lat) %>% plotly::add_markers(hoverinfo = 'text'
,text = ~paste0(name,'<br>',country,'<br>','long: ',coord.lon,'<br>'
,'lat: ',coord.lat
,'<br>','temp: ',data$main$temp
,'<br>','humidity: ',data$main$humidity),color = I("red3"))
library(plotly)
cityob <- weatherforecast::cityweather$new('london')
data <- cbind(as.data.frame(cityob$content$city),cityob$content$list[1,])
data %>%  plotly::plot_mapbox(x= ~coord.lon,y =~coord.lat) %>% plotly::add_markers(hoverinfo = 'text'
,text = ~paste0(name,'<br>',country,'<br>','long: ',coord.lon,'<br>'
,'lat: ',coord.lat
,'<br>','temp: ',data$main$temp
,'<br>','humidity: ',data$main$humidity),color = I("red3"))
library(weatherforecast)
library(plotly)
MAPBOX_TOKEN <- Sys.setenv('MAPBOX_TOKEN'='pk.eyJ1IjoibmFoZmE5MTEiLCJhIjoiY2ptZXp4ZmlqMGJvYzN3bnZxcWwzM3JsYiJ9.IgE2DjVkNUjg5tdl4oCX1A')
cityob <- weatherforecast::cityweather$new('london')
data <- cbind(as.data.frame(cityob$content$city),cityob$content$list[1,])
data %>%  plotly::plot_mapbox(x= ~coord.lon,y =~coord.lat) %>% plotly::add_markers(hoverinfo = 'text'
,text = ~paste0(name,'<br>',country,'<br>','long: ',coord.lon,'<br>'
,'lat: ',coord.lat
,'<br>','temp: ',data$main$temp
,'<br>','humidity: ',data$main$humidity),color = I("red3"))
library(weatherforecast)
library(plotly)
MAPBOX_TOKEN <- Sys.setenv('MAPBOX_TOKEN'='pk.eyJ1IjoibmFoZmE5MTEiLCJhIjoiY2ptZXp4ZmlqMGJvYzN3bnZxcWwzM3JsYiJ9.IgE2DjVkNUjg5tdl4oCX1A')
cityob <- weatherforecast::cityweather$new('london')
data <- cbind(as.data.frame(cityob$content$city),cityob$content$list[1,])
plotly::plot_mapbox(x= ~coord.lon,y =~coord.lat,data = data
,plotly::add_markers(hoverinfo = 'text'
,text = ~paste0(name,'<br>',country,'<br>','long: ',coord.lon,'<br>'
,'lat: ',coord.lat
,'<br>','temp: ',data$main$temp
,'<br>','humidity: ',data$main$humidity),color = I("red3")))
library(weatherforecast)
library(plotly)
MAPBOX_TOKEN <- Sys.setenv('MAPBOX_TOKEN'='pk.eyJ1IjoibmFoZmE5MTEiLCJhIjoiY2ptZXp4ZmlqMGJvYzN3bnZxcWwzM3JsYiJ9.IgE2DjVkNUjg5tdl4oCX1A')
cityob <- weatherforecast::cityweather$new('london')
data <- cbind(as.data.frame(cityob$content$city),cityob$content$list[1,])
add_markers(hoverinfo = 'text'
,text = ~paste0(name,'<br>',country,'<br>','long: ',coord.lon,'<br>'
,'lat: ',coord.lat
,'<br>','temp: ',data$main$temp
,'<br>','humidity: ',data$main$humidity),color = I("red3")
,p = plot_mapbox(x= ~coord.lon,y =~coord.lat,data = data
)
)
cityob <- weatherforecast::cityweather$new('london')
data <- cityob$content$list
add_lines(p =  add_markers(
hoverinfo = 'text', text = ~paste(main$temp,'°C')
, p = plot_ly(x = ~dt_txt
,y = ~main$temp
,data = data)))
add_lines(p =  add_markers(
hoverinfo = 'text', text = ~paste(main$temp,'°C')
, p = plot_ly(x = ~dt_txt
,y = ~main$temp
,data = data)),layout(showlegend = FALSE, xaxis = list(
title = 'date and time'
), yaxis = list(title='tempreture')) )
layout(showlegend = FALSE, xaxis = list(
title = 'date and time'
), yaxis = list(title='tempreture'),  add_lines(p =  add_markers(
hoverinfo = 'text', text = ~paste(main$temp,'°C')
, p = plot_ly(x = ~dt_txt
,y = ~main$temp
,data = data))))
library(weatherforecast)
library(weatherforecast)
