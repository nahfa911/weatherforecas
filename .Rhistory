, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',~cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(respose)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- deparse(substitute(cityname))
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new(London)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(respose)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('London')
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('London')
a$cityname
a$content
a$status_code
a <- cityweather$new('Nahid')
a$has_error
a <- cityweather$new('Linkoping')
a$cityname
a$content
a$status_code
a$has_error
a <- cityweather$new('Linkop')
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
stopifnot(cityname %in% city_list$name){'This city does not exist!'}
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(cityname %in% city_list$name){stopifnot('This city does not exist!')}
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('Linkop')
cityweather$new('Linkop')
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
if(cityname %in% city_list$name){stopifnot('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('Linkop')
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(cityname %not_in% city_list$name){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('Linkop')
a <- cityweather$new('Nahid')
a <- cityweather$new('london')
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
#`%not_in%` <- purrr::negate(`%in%`)
#if(cityname %not_in% city_list$name){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('london')
a$cityname
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
)
)
a <- cityweather$new('london')
a$cityname
a$content
str(a$content)
a$content$message
a <- cityweather$new('london')
a$content$list
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=5&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
, print = function(){
}
)
)
a <- cityweather$new('london')
a$content$list
class(a$content$list)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
,prediction = "data.frame"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
predition <<- content$list
}
, print = function(){
}
)
)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
,prediction = "data.frame"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
predition <<- content(resp)$list
}
, print = function(){
}
)
)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
,prediction = "data.frame"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
, print = function(){
cat(
'call:\n'
,str(content)
)
}
)
)
a <- cityweather$new('london')
a$print()
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
,prediction = "data.frame"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
, print = function(){
cat('The structure of response content:\n')
str(content)
}
)
)
a <- cityweather$new('london')
a$print()
a$content$cnt
a$content$cod
a$content$message
a$content$list
a$content$city
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',cityname,
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- cityname
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
, print = function(){
cat('The structure of response content:\n')
str(content)
}
)
)
library(weatherforecast)
?weatherforecast
?cityweather
?city_list
library(weatherforecast)
devtools::use_testthat()
library(testthat)
cityweather <- setRefClass('cityweather'
, fields = list(
cityname = "character"
,content = "list"
,status_code = "integer"
,has_error = "logical"
)
, methods = list(
initialize = function(cityname, key = '3c656bd3014279a8f41b90522c014977'){
"Getting the data from API"
`%not_in%` <- purrr::negate(`%in%`)
if(tolower(cityname) %not_in% tolower(city_list$name)){stop('This city does not exist!')}
resp <- httr::GET(paste0('http://api.openweathermap.org/data/2.5/forecast?q=',as.character(cityname),
'&cnt=7&appid=', key))
if(http_type(resp) != 'application/json'){stop('Response is not in json format!')}
if(http_error(resp)){stop(
sprintf('The server responded with this error:\n[%s]\n%s\n<%s>'
,status_code(resp)
,content(resp)$message
,content(resp)$documentation_url)
)}
content <<- jsonlite::fromJSON(httr::content(resp,'text'))
cityname <<- as.character(cityname)
status_code <<- httr::status_code(resp)
has_error <<- httr::http_error(resp)
}
, print = function(){
"Print out the structure of response content"
cat('The structure of response content:\n')
str(content)
}
)
)
library(weatherforecast)
library(weatherforecast)
cityweather$new('Na')
expect_error(cityweather$new('Na'))
cityweather$new('Na')
status_code(cityweather$new('linkoping',key = '3c656bd3014279a8f41b')
status_code(cityweather$new('linkoping',key = '3c656bd3014279a8f41b'))
status_code(cityweather$new('linkoping',key = '3c656bd3014279a8f41b'))
cityweather$new('Na')
library(weatherforecast)
